image: iaghcp-docker-technical-architecture.jfrog.io/docker:1.0.0

services:
  - name: iaghcp-docker-technical-architecture.jfrog.io/docker-dind:1.0.0
    alias: docker

stages:
- build code
- test code
- build application
- test application
- push binaries
- deploy application
- regression test deploy

variables:
  IMAGE_NAME: userapi
  IMAGE_DB_NAME: userapi-db
  URL_IB_REGISTRY: https://iaghcp.jfrog.io/iaghcp/api/docker/docker-ib/v2/$IMAGE_NAME
  TECH_ARCH_REGISTRY: iaghcp-docker-technical-architecture.jfrog.io
  IB_REGISTRY: iaghcp-docker-ib.jfrog.io
  CONTAINER_SERVICE_IMAGE: $IB_REGISTRY/userapi/$IMAGE_NAME
  CONTAINER_DB_IMAGE: $IB_REGISTRY/userapi/$IMAGE_DB_NAME
  BUILD_NAME: $CI_PROJECT_NAME
  GITLAB_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/ib/userapi/$IMAGE_NAME
  GITLAB_DB_REGISTRY: registry.gitlab.com/iag-dev/ib/userapi/$IMAGE_DB_NAME

build_service_node:
  stage: build code
  image: iaghcp-docker-technical-architecture.jfrog.io/node:latest
  before_script:
    - cd ./userapi
    # Install JFrog CLI
    - curl -fL https://getcli.jfrog.io | sh
    # Configure Artifactory instance with JFrog CLI
    - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
    - ./jfrog rt c show
  script:
    # Run the npm install command
    - ./jfrog rt npmi $ARTIFACTORY_NPM_REPOSITORY --build-name=userapi-$BUILD_NAME --build-number=$CI_PIPELINE_ID
    # Collect the environment variables
    - ./jfrog rt bce userapi-$BUILD_NAME $CI_PIPELINE_ID
    # Publish the package
    - ./jfrog rt npmp $ARTIFACTORY_NPM_REPOSITORY --build-name=userapi-$BUILD_NAME --build-number=$CI_PIPELINE_ID
    # Pass the build information to Artifactory
    - ./jfrog rt bp userapi-$BUILD_NAME $CI_PIPELINE_ID
  except:
    - triggers

static_test_service:
  stage: test code
  image: iaghcp-docker-technical-architecture.jfrog.io/sonar-scanner:2.0.0
  variables:
    PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
  before_script:
    - npm install eslint -g
    - npm install eslint-config-airbnb-base -g
    - npm install eslint-plugin-import -g
  script:
    - cd ./userapi
    - npm install
    - eslint -f json -o report.json .
    - rm -rf node_modules/
    - sonar-scanner
     -Dsonar.projectKey=${PROJECT_KEY//[\/]/_} 
     -Dsonar.projectName=$CI_PROJECT_NAME 
     -Dsonar.branch=$CI_COMMIT_REF_NAME 
     -Dsonar.projectVersion=$CI_JOB_ID 
     -Dsonar.sources=./ 
     -Donar.eslint.reportPaths=report.json 
     -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
     -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
     -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
  except:
    - triggers

build_service:
  stage: build application
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_SERVICE_REGISTRY ./userapi
    - docker tag $GITLAB_SERVICE_REGISTRY $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

build_db:
  stage: build application
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_DB_REGISTRY ./userapi-db
    - docker tag $GITLAB_DB_REGISTRY $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

validate_api_description:
  stage: test application
  before_script:
    - apk update
    - apk upgrade
    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - apk add --no-cache python3 py3-pip python3-dev
    - apk add --no-cache openssl-dev libffi-dev build-base
    - pip3 install --upgrade pip
    - pip3 install --upgrade setuptools
    - pip3 install cffi
    - pip3 install docker-compose
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - export TAG=$CI_COMMIT_REF_NAME 
    - docker-compose -f docker-compose.design.test.yml up -d
    - sleep 90s
    - docker logs $(docker ps -a --filter "name=userapi_userapi-design-test_1" --format "{{.ID}}")
  after_script:
    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
    - docker rm $(docker ps -a -q) -f > /dev/null
    - docker rmi $(docker images -q) -f > /dev/null || true
  only:
    - master
  except:
    - triggers

functional_test_service:
  stage: test application
  before_script:
    - apk update
    - apk upgrade
    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - apk add --no-cache python3 py3-pip python3-dev
    - apk add --no-cache openssl-dev libffi-dev build-base
    - pip3 install --upgrade pip
    - pip3 install --upgrade setuptools
    - pip3 install cffi
    - pip3 install docker-compose
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - export TAG=$CI_COMMIT_REF_NAME 
    - docker-compose -f docker-compose.functional.test.yml up -d
    - sleep 60s
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_FUNC_TEST
    - docker logs $(docker ps -a --filter ancestor=iaghcp-docker-technical-architecture.jfrog.io/newman:1.0.0 --format "{{.ID}}")
  after_script:
    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
    - docker rm $(docker ps -a -q) -f > /dev/null
    - docker rmi $(docker images -q) -f > /dev/null || true
  when: manual
  artifacts:
    paths:
      - ./outputfile.xml
  only:
    - master
  except:
    - triggers

performance_test_service:
  stage: test application
  before_script:
    - apk update
    - apk upgrade
    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - apk add --no-cache python3 py3-pip python3-dev
    - apk add --no-cache openssl-dev libffi-dev build-base
    - pip3 install --upgrade pip
    - pip3 install --upgrade setuptools
    - pip3 install cffi
    - pip3 install docker-compose
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - export TAG=$CI_COMMIT_REF_NAME 
    - export TEST_NUMBER=$CI_COMMIT_SHA
    - docker-compose -f docker-compose.performance.test.yml up -d
    - sleep 120s
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_PERF_TEST
    - docker logs $(docker ps -a --filter ancestor=iaghcp-docker-technical-architecture.jfrog.io/taurus:1.1.0 --format "{{.ID}}")
  after_script:
    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
    - docker rm $(docker ps -a -q) -f > /dev/null
    - docker rmi $(docker images -q) -f > /dev/null || true
  when: manual
  only:
    - master
  except:
    - triggers

push_service_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_SERVICE_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_IB_REGISTRY=$URL_IB_REGISTRY
  only:
    - master
  except:
    - triggers

push_db_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_DB_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_DB_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_IB_REGISTRY=$URL_IB_REGISTRY
  only:
    - master
  except:
    - triggers

deploy_staging:
  stage: deploy application
  variables:
    OC_URL: $OC_URL_STG
    OC_TOKEN: $OC_TOKEN_STG
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/userapi-stg\/env.sh'
    REMOTE_APPSETTINGS: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-USERAPI-CONFIG\/stg\/default.json'
  before_script:
    - sed -i -e "s/{{TAG_SERVICE}}/$CI_PIPELINE_ID/g" deployment.yml
    - sed -i -e "s/{{TAG_DB}}/$CI_PIPELINE_ID/g" deployment.yml
    - sed -i -e "s/{{TAG_GLOBALCONF}}/$TAG_GLOBALCONF/g" deployment.yml
    - sed -i -e "s/{{TAG_SYSTEMCONF}}/$TAG_SYSTEMCONF/g" deployment.yml
    - sed -i -e "s/{{REMOTE_APPSETTINGS}}/$REMOTE_APPSETTINGS/g" deployment.yml
    - oc login $OC_URL_STG --token $OC_TOKEN_STG --insecure-skip-tls-verify
    - oc project ocp01-userapi-uat
  script:
    - oc create --filename=deployment.yml
    - oc expose service userapi
  artifacts:
    paths:
      - ./deployment.yml
  environment:
    name: staging
    url: http://userapi-ocp01-userapi-uat.apps.ocp01.hcp.iairgroup.com/userapi/1.0/users
  only:
      - master
  except:
    - triggers

deploy_production:
  stage: deploy application
  image: dparra0007/docker:20180917-2
  variables:
    OC_URL: $OC_URL_PRO
    OC_TOKEN: $OC_TOKEN_PRO
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/master\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/userapi\/env.sh'
    REMOTE_APPSETTINGS: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-USERAPI-CONFIG\/master\/default.json'
  before_script:
    - sed -i -e "s/{{TAG_SERVICE}}/$CI_PIPELINE_ID/g" deployment-prod.yml
    - sed -i -e "s/{{TAG_DB}}/$CI_PIPELINE_ID/g" deployment-prod.yml
    - sed -i -e "s/{{TAG_GLOBALCONF}}/$TAG_GLOBALCONF/g" deployment-prod.yml
    - sed -i -e "s/{{TAG_SYSTEMCONF}}/$TAG_SYSTEMCONF/g" deployment-prod.yml
    - sed -i -e "s/{{REMOTE_APPSETTINGS}}/$REMOTE_APPSETTINGS/g" deployment-prod.yml
    - oc login $OC_URL_PRO --token $OC_TOKEN_PRO --insecure-skip-tls-verify
    - oc new-project $(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    - oc adm policy add-scc-to-user privileged -z default -n $(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
  script:
    - istioctl kube-inject -f deployment-prod.yml -o deployment-with-istio.yml
    #- oc delete -f deployment-with-istio.yml
    - oc apply -f deployment-with-istio.yml
    - oc expose service userapi
  artifacts:
    paths:
      - ./deployment-prod.yml
      - ./deployment-with-istio.yml
  environment:
    name: production
    url: http://userapi-w53-userapi.dit-iaggs.com/userapi/1.0/users/
  when: manual
  only:
      - master
  except:
    - triggers

functional_regression_test_staging:
  stage: regression test deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/newman:1.0.0
  before_script:
    - apk add --update curl
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - newman run https://www.getpostman.com/collections/6d9fe4f1a0033de5a2af --reporters cli,junit --reporter-junit-export outputfile.xml --environment https://api.getpostman.com/environments/651996-f4ff0aa5-3c70-edbe-ddb1-d81231001eb4?apikey=100822fe2bd7454eb916c8ebdd4be266
    - sed -i -e 's/<testcase/<testcase classname=\"CI\"/g' outputfile.xml
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_REGRESSION_TEST_STG
  only:
      - master

functional_regression_test_production:
  stage: regression test deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/newman:1.0.0
  before_script:
    - apk add --update curl
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - newman run https://www.getpostman.com/collections/6d9fe4f1a0033de5a2af --reporters cli,junit --reporter-junit-export outputfile.xml --environment https://api.getpostman.com/environments/651996-b6820a2c-0306-45c6-b5ab-1db91a8f727e?apikey=100822fe2bd7454eb916c8ebdd4be266
    - sed -i -e 's/<testcase/<testcase classname=\"CI\"/g' outputfile.xml
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_REGRESSION_TEST_PRO
  when: manual
  only:
      - master